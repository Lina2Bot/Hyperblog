ComandosRepositorios
git 
git init        cuando das click a esto aparecen dos conceptos nuevos:

Directorio de trabajo [aquí estás cuando das git init]
Área de Preparación o STAGING 
Repositorio Local [Base de datos históricos que le haz hecho al proyecto]

    Cuando trabajas con varias personas entonces necesitarás
        Repositorio Remoto [Github, GitLab o BigBocket]
            Y en lugar de usar git init
            
            se usa git clone url 


git add NombreArchivo.extensión
git status
git commit -m "Cambio1"
git rm NombreArchivo.extensión para borrar el archivo 
git rm --cached NombreArchivo.extensión
git config
git config --list
git config --list --show.origin
cat NombreArchivo.extensión
git log
git show
git add .
git diff [no. de rastreo commit1] [no. de rastreo commit2]  o viceversa
git reset [no. de rastreo commit] --hard    borrar todo desde commits hasta staging

git rm --cached
git rm --force
git reset --soft
git reset --hard
git reset HEAD
git checkout master NombreArchivo.extensión
git checkout [no. de rastreo commit] NombreArchivo.extensión
git log
git log --stat

history     HISTORIAL DE TODOS LOS COMANDOS 
!678        aparecerá comando guardado en este no. del historial
pwd         print working directory - señala el directorio donde estás trabajando

Algunos comandos que pueden ayudar cuando colaboren con proyectos muy grandes de github:

    git log --oneline - Te muestra el id commit y el título del commit.
    git log --decorate- Te muestra donde se encuentra el head point en el log.
    git log --stat - Explica el número de líneas que se cambiaron brevemente.
    git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
    git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
    git log --graph --oneline --decorate y
    git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
    git log -3 - Limitamos el número de commits.
    git log --after=“2018-1-2” ,
    git log --after=“today” y
    git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
    git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
    git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
    git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
    git log – index.html- Busca los commits en un archivo en específico.
    git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
    git log > log.txt - guardar los logs en un archivo txt


git clone url_del_servidor_remoto: Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios en la carpeta .git.
git push: Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.
git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).
git merge: También usamos el comando git merge con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo.
git pull: Básicamente, git fetch y git merge al mismo tiempo.

git commit -am "mensaje para identificar cambio"
git branch NombreDeBranch       para crear rama  
git branch      para ver en que rama estas
git checkout cabecera       Es para cabiar el HEAD o apuntador o cursos donde estás trabajando
add NOmbreArchivo.extension         para agregar los cambios 

PARA TRAER DEL GITHUB AL LOCAL 
git remote add origin url guardar la URL del repositorio de GitHub con el nombre de origin
git remote      verifircar que la URL se haya guardado correctamente
git remote -v   "" y v de manera verbal
git pull origin main
git pull origin main --allow-unrelated-histories      traer la version del repositorio remoto y hacer merge para crear un commit con losarchivos de ambas partes. Podemos usar git fetch y git merge o solo esta opcion

    Esto va a crear una rama master no va a actualizar a la MAIN es decir tendras dos ramas
git push origin master          guardar los camios de nestro reositorio local a GitHub. pero me crea una rama o branch llamada master, no lo guarda en main
git push --set-upstream origin master      hace otra rama

PARA NO HACER LO ANTERIOR SEGUIR 
    git branch -M main y git push -u origin main

Crear un nuevo repositorio on la línea de comandos
echo "# master" >> README.md 
git init
git add README.md 
git commit -m "primer commit"
git branch -M main
git remote add origin URL
git push -u origin main

Para mandar repositorio local a GitHub
git remote add origin URL
git branch -M main
git push -u origin main

git remote add origin URL
git remote
git remote -v 
git branch -M main (esto es para que te coloque en main y no te haga una segunda rama llamada master)
git push -u origin main
    No los deja porque son 
    repositorios diferentes entonces:
git pull origin main 
siguen sin dejarlos 
git pull origin main --allow-unrelated-histories
git push -u origin main


git remote rm origin


Llaves SSH en local
comocate en ~
cd ~  TE COLOCAS EN HOME

VERIFICAR TU MAIL PARA GITHUB
git config -l
SI DEBES CAMBIAR MAIL
git config --global user.email "AQUI VA TU MAIL"

CREAR LLAVE SSH
ssh-keygen -t rsa -b 4096 -C "tu@email.com"
    Te dará pasos a seguir.
EN WINDOWS Y LINUX
# Encender el "servidor" de llaves SSH de tu computadora:
eval $(ssh-agent -s)

# Añadir tu llave SSH a este "servidor":
ssh-add ruta-donde-guardaste-tu-llave-privada


EN MAC
# Encender el "servidor" de llaves SSH de tu computadora:
eval "$(ssh-agent -s)"

# Si usas una versión de OSX superior a Mac Sierra (v10.12)
# debes crear o modificar un archivo "config" en la carpeta
# de tu usuario con el siguiente contenido (ten cuidado con
# las mayúsculas):
Host *
        AddKeysToAgent yes
        UseKeychain yes
        IdentityFile ruta-donde-guardaste-tu-llave-privada

# Añadir tu llave SSH al "servidor" de llaves SSH de tu
# computadora (en caso de error puedes ejecutar este
# mismo comando pero sin el argumento -K):
ssh-add -K ruta-donde-guardaste-tu-llave-privada


PARA VISUALIZAR HISTORICO DE proyecto
git log
git log --all
git log --all --graph
git log --all --graph --decorate --oneline

Para comandos muy largos se puede poner actualizaciones
alias arbolito="git log --all --graph --decorate --oneline"


TAGS        para cuando trabajes en versiones 2.0, 2.3.4 etc. 
git tag -a v0.1 -m "Resultado de las primeras clases del curso" e62023e  ]---> este número sale en el git log 
git tag     visualizar todos los tags guardados
git show-ref --tags     para saber a que hash o commit está conectado a determinado tag 

primero haces un pull
git pull origin main

git push origin --tags 

    SI CREAMOS UN commit POR ERROR
    arbolito        para buscar el id del commit
    git tag -a error -m "me distraje..."
    git push origin --tags

    BORRAR TAG
    git tag -d NombreTAG
    git status  para VERIFICAR
    git pull origin main    por buena practica para actualizar lo que esta en internet
    git push origin --tags      para subirlo a internet con tag borrado

        Si te vas a GitHub el taga va a seguir apareciendo, porque los tags se pueden usar como realises. 
        entonces borras de manera especial

        git tag     Verificas que de manra local ya no este
        
        BORRAR TAG DE GITHUB
        git push origin :refs/tags/error

ENVIAR DIFERENTES RAMAS AL SERVIDOR/GITHUB