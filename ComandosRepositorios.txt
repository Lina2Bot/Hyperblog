ComandosRepositorios
git 
git init        cuando das click a esto aparecen dos conceptos nuevos:

Directorio de trabajo [aquí estás cuando das git init]
Área de Preparación o STAGING 
Repositorio Local [Base de datos históricos que le haz hecho al proyecto]

    Cuando trabajas con varias personas entonces necesitarás
        Repositorio Remoto [Github, GitLab o BigBocket]
            Y en lugar de usar git init
            
            se usa git clone url 


git add NombreArchivo.extensión
git status
git commit -m "Cambio1"
git rm NombreArchivo.extensión para borrar el archivo 
git rm --cached NombreArchivo.extensión
git config
git config --list
git config --list --show.origin
cat NombreArchivo.extensión
git log
git show
git add .
git diff [no. de rastreo commit1] [no. de rastreo commit2]  o viceversa
git reset [no. de rastreo commit] --hard    borrar todo desde commits hasta staging

git rm --cached
git rm --force
git reset --soft
git reset --hard
git reset HEAD
git checkout master NombreArchivo.extensión
git checkout [no. de rastreo commit] NombreArchivo.extensión
git log
git log --stat

history     HISTORIAL DE TODOS LOS COMANDOS 
!678        aparecerá comando guardado en este no. del historial
pwd         print working directory - señala el directorio donde estás trabajando

Algunos comandos que pueden ayudar cuando colaboren con proyectos muy grandes de github:

    git log --oneline - Te muestra el id commit y el título del commit.
    git log --decorate- Te muestra donde se encuentra el head point en el log.
    git log --stat - Explica el número de líneas que se cambiaron brevemente.
    git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
    git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
    git log --graph --oneline --decorate y
    git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
    git log -3 - Limitamos el número de commits.
    git log --after=“2018-1-2” ,
    git log --after=“today” y
    git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
    git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
    git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
    git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
    git log – index.html- Busca los commits en un archivo en específico.
    git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
    git log > log.txt - guardar los logs en un archivo txt


git clone url_del_servidor_remoto: Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios en la carpeta .git.
git push: Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.
git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).
git merge: También usamos el comando git merge con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo.
git pull: Básicamente, git fetch y git merge al mismo tiempo.

git commit -am "mensaje para identificar cambio"
git branch NombreDeBranch       para crear rama  
git branch      para ver en que rama estas
git checkout cabecera       Es para cabiar el HEAD o apuntador o cursos donde estás trabajando
add NOmbreArchivo.extension         para agregar los cambios 
